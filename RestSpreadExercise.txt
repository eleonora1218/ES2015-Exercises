Rest & Spread Operator Exercise

1. Refactor this function to use the rest operator & an arrow function:
function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}
ES2015 Version:
const filterOutOdds = (...args) => args.filter(v => v % 2 === 0)


2. findMin() using the rest and spread operator.
const findMin = (...args) => Math.min(...args)


3. mergeObjects() accepts two objects and returns a new object which contains all the keys and values of the first object and second object.
const mergeObjects = (obj1, obj2) => ({...obj1, ...obj2})


4. doubleAndReturnArgs() accepts an array and a variable number of arguments. Rreturns a new array with the original array values and all of additional arguments doubled.
const doubleAndReturnArgs = (arr, ...args) => [...arr, ...args.map(v => v *2)]


5. Use rest, spread and arrow functions. Return new arrays or objects and not modifyed existing inputs.


Remove a random element. Return a new array without that item:
const removeRandom = items => {
  let idx = Math.floor(Math.random() * items.length);
  return [...items.slice(0, idx), ...items.slice(idx + 1)];
};


Return a new array with every item in array1 and array2. 
const extend = (array1, array2) => [...array1, ...array2];



Return a new object with all the keys and values from obj and a new key/value pair.
const addKeyVal = (obj, key, val) => {
  let newObj = { ...obj }
  newObj[key] = val;
  return newObj;
};
const addKeyVal = (obj, key, val) => { ...obj, [key]: val };


Return a new object with a key removed.
const removeKey = (obj, key) => {
  let newObj = { ...obj }
  delete newObj[key]
  return newObj;
};
const removeKey = (obj, key) => {
    ({ [key]: undefined, ...obj } = obj);
    return obj;
};
s

Combine two objects and return a new object.
const combine = (obj1, obj2) => { ...obj1, ...obj2 };


Return a new object with a modified key and value.
const update = (obj, key, val) => {
  let newObj = { ...obj }
  newObj[key] = val;
  return newObj;
};
const update = (obj, key, val) => {
  return { ...obj, [key]: val };
};